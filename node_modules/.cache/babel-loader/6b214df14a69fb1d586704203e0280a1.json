{"ast":null,"code":"import _toConsumableArray from\"/home/joaquim/internship/emoji-search/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/joaquim/internship/emoji-search/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import Result from'./components/Result';import Header from'./components/Header';import Search from'./components/Search';import data from'./json/data.json';function App(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),search=_useState2[0],setSearch=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),newEmojis=_useState4[0],setNewEmojis=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),emojiData=_useState6[0],setEmojiData=_useState6[1];useEffect(function(){setEmojiData(data);},[]);useEffect(function(){// get a array of search words\nvar searchQuery=search.toLowerCase().trim().split(' ');// get the array length (to make the decision if the emoji is worth to show or not)\nvar nrWords=searchQuery.length;// create a query match counter\nvar matchCounter=0;// create an array to fill with the new emojis\nvar resultEmojis=[];// if search has content\nif(nrWords>0){// iterate every emoji\nemojiData&&emojiData.forEach(function(emoji){// remove the duplicates of the emoji's keywords using a Set\nvar emojiKeywordsArray=_toConsumableArray(new Set(emoji.keywords.trim().split(' ')));// reset the counter\nmatchCounter=0;// iterate the search query\nsearchQuery&&searchQuery.forEach(function(query){// iterate the emoji's keywords\nemojiKeywordsArray.forEach(function(keyword){// if the word exists in the emoji's keywords\nif(keyword.indexOf(query)>=0){matchCounter++;// then update the counter\n}});});// if counter is >= the number of words of the search query, then the emoji must be shown\nif(nrWords<=matchCounter){resultEmojis.push(emoji);}});}// update the newEmojis state\nsetNewEmojis(resultEmojis);},[search]);var handleChange=function handleChange(newSearch){// update search state\nsetSearch(newSearch.toLowerCase());};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Header,null),/*#__PURE__*/React.createElement(Search,{onChange:handleChange}),/*#__PURE__*/React.createElement(Result,{list:search===''?emojiData:newEmojis}));}export default App;","map":{"version":3,"sources":["/home/joaquim/internship/emoji-search/src/App.js"],"names":["React","useState","useEffect","Result","Header","Search","data","App","search","setSearch","newEmojis","setNewEmojis","emojiData","setEmojiData","searchQuery","toLowerCase","trim","split","nrWords","length","matchCounter","resultEmojis","forEach","emoji","emojiKeywordsArray","Set","keywords","query","keyword","indexOf","push","handleChange","newSearch"],"mappings":"gUAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,kBAAjB,CAGA,QAASC,CAAAA,GAAT,EAAe,eACeN,QAAQ,CAAC,EAAD,CADvB,wCACNO,MADM,eACEC,SADF,8BAEuBR,QAAQ,CAAC,EAAD,CAF/B,yCAEJS,SAFI,eAEOC,YAFP,8BAGuBV,QAAQ,EAH/B,yCAGJW,SAHI,eAGOC,YAHP,eAKXX,SAAS,CAAE,UAAM,CACbW,YAAY,CAACP,IAAD,CAAZ,CACH,CAFQ,CAEN,EAFM,CAAT,CAIAJ,SAAS,CAAE,UAAM,CACb;AACA,GAAMY,CAAAA,WAAW,CAAGN,MAAM,CAACO,WAAP,GAAqBC,IAArB,GAA4BC,KAA5B,CAAkC,GAAlC,CAApB,CAEA;AACA,GAAMC,CAAAA,OAAO,CAAGJ,WAAW,CAACK,MAA5B,CAEA;AACA,GAAIC,CAAAA,YAAY,CAAG,CAAnB,CAEA;AACA,GAAIC,CAAAA,YAAY,CAAG,EAAnB,CAEA;AACA,GAAKH,OAAO,CAAG,CAAf,CAAmB,CACf;AACAN,SAAS,EAAIA,SAAS,CAACU,OAAV,CAAmB,SAACC,KAAD,CAAW,CACvC;AACA,GAAMC,CAAAA,kBAAkB,oBAAO,GAAIC,CAAAA,GAAJ,CAAQF,KAAK,CAACG,QAAN,CAAeV,IAAf,GAAsBC,KAAtB,CAA4B,GAA5B,CAAR,CAAP,CAAxB,CAEA;AACAG,YAAY,CAAG,CAAf,CAEA;AACAN,WAAW,EAAIA,WAAW,CAACQ,OAAZ,CAAqB,SAAAK,KAAK,CAAI,CACzC;AACAH,kBAAkB,CAACF,OAAnB,CAA4B,SAAAM,OAAO,CAAI,CACnC;AACA,GAAIA,OAAO,CAACC,OAAR,CAAgBF,KAAhB,GAA0B,CAA9B,CAAiC,CAC7BP,YAAY,GAAK;AACpB,CACJ,CALD,EAMH,CARc,CAAf,CAUA;AACA,GAAKF,OAAO,EAAIE,YAAhB,CAA+B,CAC3BC,YAAY,CAACS,IAAb,CAAkBP,KAAlB,EACH,CACJ,CAtBY,CAAb,CAuBH,CACD;AACAZ,YAAY,CAACU,YAAD,CAAZ,CAEH,CA3CQ,CA2CN,CAACb,MAAD,CA3CM,CAAT,CA6CA,GAAMuB,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,SAAD,CAAe,CAChC;AACAvB,SAAS,CAACuB,SAAS,CAACjB,WAAV,EAAD,CAAT,CACH,CAHD,CAKA,mBACE,qDACE,oBAAC,MAAD,MADF,cAEE,oBAAC,MAAD,EAAQ,QAAQ,CAAEgB,YAAlB,EAFF,cAGE,oBAAC,MAAD,EAAQ,IAAI,CAAEvB,MAAM,GAAK,EAAX,CAAgBI,SAAhB,CAA4BF,SAA1C,EAHF,CADF,CAQH,CAED,cAAeH,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Result from './components/Result'\nimport Header from './components/Header'\nimport Search from './components/Search'\nimport data from './json/data.json'\n\n\nfunction App() {\n    let [search, setSearch] = useState('');\n    const [newEmojis, setNewEmojis] = useState([])\n    const [emojiData, setEmojiData] = useState();\n\n    useEffect( () => {\n        setEmojiData(data);\n    }, [])\n\n    useEffect( () => {\n        // get a array of search words\n        const searchQuery = search.toLowerCase().trim().split(' ');\n\n        // get the array length (to make the decision if the emoji is worth to show or not)\n        const nrWords = searchQuery.length;\n\n        // create a query match counter\n        let matchCounter = 0;\n\n        // create an array to fill with the new emojis\n        let resultEmojis = [];\n\n        // if search has content\n        if ( nrWords > 0 ) {\n            // iterate every emoji\n            emojiData && emojiData.forEach( (emoji) => {\n                // remove the duplicates of the emoji's keywords using a Set\n                const emojiKeywordsArray = [...new Set(emoji.keywords.trim().split(' '))];\n\n                // reset the counter\n                matchCounter = 0;\n\n                // iterate the search query\n                searchQuery && searchQuery.forEach( query => {\n                    // iterate the emoji's keywords\n                    emojiKeywordsArray.forEach( keyword => {\n                        // if the word exists in the emoji's keywords\n                        if (keyword.indexOf(query) >= 0) {\n                            matchCounter++;  // then update the counter\n                        }\n                    })\n                })\n\n                // if counter is >= the number of words of the search query, then the emoji must be shown\n                if ( nrWords <= matchCounter ) {\n                    resultEmojis.push(emoji);\n                }\n            })\n        }\n        // update the newEmojis state\n        setNewEmojis(resultEmojis);\n\n    }, [search])\n\n    const handleChange = (newSearch) => {\n        // update search state\n        setSearch(newSearch.toLowerCase());\n    }\n\n    return (\n      <>\n        <Header />\n        <Search onChange={handleChange}/>\n        <Result list={search === '' ? emojiData : newEmojis} />\n\n    </>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}