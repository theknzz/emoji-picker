{"ast":null,"code":"var _jsxFileName = \"/home/joaquim/internship/emoji-search/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport Result from './components/Result';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport data from './json/data.json'; // const Header = styled.div`\n//     display: flex;\n//     flex-direction: column;\n//     align-items: center;\n//     margin-bottom: 30px;\n// `\n// const Input = styled.input`\n//     width: 60%;\n//     font-size: 15px;\n//     padding: 10px;\n// `\n\nfunction App() {\n  const [search, setSearch] = useState('');\n  const [newEmojis, setNewEmojis] = useState([]);\n  const [emojiData, setEmojiData] = useState();\n  useEffect(() => {\n    setEmojiData(data);\n    console.log(emojiData);\n  });\n\n  const handleChange = newSearch => {\n    // update search state\n    setSearch(newSearch.toLowerCase()); // get a array of search words\n\n    const searchQuery = search.toLowerCase().trim().split(' '); // get the array length (to make the decision if the emoji is worth to show or not)\n\n    const nrWords = searchQuery.length; // create a query match counter\n\n    let matchCounter = 0; // if search has content\n    // iterate every emoji\n\n    if (nrWords > 0) {\n      emojiData.forEach(emoji => {\n        // remove the duplicates of the emoji's keywords using a Set\n        const emojiKeywordsArray = [...new Set(emoji.keywords.trim().split(' '))]; // reset the counter\n\n        matchCounter = 0;\n        searchQuery.forEach(query => {\n          emojiKeywordsArray.forEach(keyword => {\n            if (query.indexOf(keyword)) matchCounter++;\n          });\n        });\n      });\n    } // iterate the search query keywords\n    // iterate the emoji's keywords\n    // if the word exists in the emoji's keywords\n    // then update the counter\n    // make the decision to update the result query with this emoji\n    // if counter is >= the number of words of the search query, then the emoji must be shown\n    // update the newEmojis state\n\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Result, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/joaquim/internship/emoji-search/src/App.js"],"names":["React","useState","useEffect","styled","Result","Header","Search","data","App","search","setSearch","newEmojis","setNewEmojis","emojiData","setEmojiData","console","log","handleChange","newSearch","toLowerCase","searchQuery","trim","split","nrWords","length","matchCounter","forEach","emoji","emojiKeywordsArray","Set","keywords","query","keyword","indexOf"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,kBAAjB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,GAAT,GAAe;AACX,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,EAA1C;AAEAC,EAAAA,SAAS,CAAE,MAAM;AACbY,IAAAA,YAAY,CAACP,IAAD,CAAZ;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACH,GAHQ,CAAT;;AAKA,QAAMI,YAAY,GAAIC,SAAD,IAAe;AAChC;AACAR,IAAAA,SAAS,CAACQ,SAAS,CAACC,WAAV,EAAD,CAAT,CAFgC,CAIhC;;AACA,UAAMC,WAAW,GAAGX,MAAM,CAACU,WAAP,GAAqBE,IAArB,GAA4BC,KAA5B,CAAkC,GAAlC,CAApB,CALgC,CAOhC;;AACA,UAAMC,OAAO,GAAGH,WAAW,CAACI,MAA5B,CARgC,CAUhC;;AACA,QAAIC,YAAY,GAAG,CAAnB,CAXgC,CAahC;AACA;;AACA,QAAIF,OAAO,GAAG,CAAd,EAAiB;AACbV,MAAAA,SAAS,CAACa,OAAV,CAAoBC,KAAD,IAAW;AAC1B;AACA,cAAMC,kBAAkB,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQF,KAAK,CAACG,QAAN,CAAeT,IAAf,GAAsBC,KAAtB,CAA4B,GAA5B,CAAR,CAAJ,CAA3B,CAF0B,CAI1B;;AACAG,QAAAA,YAAY,GAAG,CAAf;AACAL,QAAAA,WAAW,CAACM,OAAZ,CAAqBK,KAAK,IAAI;AAC1BH,UAAAA,kBAAkB,CAACF,OAAnB,CAA4BM,OAAO,IAAI;AACnC,gBAAID,KAAK,CAACE,OAAN,CAAcD,OAAd,CAAJ,EACIP,YAAY;AACnB,WAHD;AAIH,SALD;AAMH,OAZD;AAaH,KA7B+B,CA8BhC;AACI;AACA;AACA;AAEJ;AACA;AAGA;;AACH,GAxCD;;AA0CA,sBACE,uDACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAQH;;AAED,eAAejB,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled'\n\nimport Result from './components/Result'\nimport Header from './components/Header'\nimport Search from './components/Search'\nimport data from './json/data.json'\n\n\n// const Header = styled.div`\n//     display: flex;\n//     flex-direction: column;\n//     align-items: center;\n//     margin-bottom: 30px;\n// `\n// const Input = styled.input`\n//     width: 60%;\n//     font-size: 15px;\n//     padding: 10px;\n// `\n\nfunction App() {\n    const [search, setSearch] = useState('');\n    const [newEmojis, setNewEmojis] = useState([])\n    const [emojiData, setEmojiData] = useState();\n\n    useEffect( () => {\n        setEmojiData(data);\n        console.log(emojiData);\n    })\n\n    const handleChange = (newSearch) => {\n        // update search state\n        setSearch(newSearch.toLowerCase());\n\n        // get a array of search words\n        const searchQuery = search.toLowerCase().trim().split(' ');\n\n        // get the array length (to make the decision if the emoji is worth to show or not)\n        const nrWords = searchQuery.length;\n\n        // create a query match counter\n        let matchCounter = 0;\n\n        // if search has content\n        // iterate every emoji\n        if (nrWords > 0) {\n            emojiData.forEach( (emoji) => {\n                // remove the duplicates of the emoji's keywords using a Set\n                const emojiKeywordsArray = [...new Set(emoji.keywords.trim().split(' '))];\n\n                // reset the counter\n                matchCounter = 0;\n                searchQuery.forEach( query => {\n                    emojiKeywordsArray.forEach( keyword => {\n                        if (query.indexOf(keyword))\n                            matchCounter++;\n                    })\n                })\n            })\n        }\n        // iterate the search query keywords\n            // iterate the emoji's keywords\n            // if the word exists in the emoji's keywords\n            // then update the counter\n\n        // make the decision to update the result query with this emoji\n        // if counter is >= the number of words of the search query, then the emoji must be shown\n\n\n        // update the newEmojis state\n    }\n\n    return (\n      <>\n        <Header />\n        <Search />\n        <Result />\n\n    </>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}