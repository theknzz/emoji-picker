{"version":3,"sources":["components/Emoji.js","components/Result.js","components/Header.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Card","styled","div","EmojiWrapper","Label","props","visible","Emoji","emoji","useState","setVisible","useEffect","clipboard","Clipboard","destroy","onClick","e","setTimeout","className","data-clipboard-text","Container","Wrapper","Result","list","emojis","slice","map","id","uuidv4","symbol","key","Header","Search","onChange","placeholder","target","value","App","search","setSearch","newEmojis","setNewEmojis","emojiData","setEmojiData","data","searchQuery","toLowerCase","trim","split","nrWords","length","matchCounter","resultEmojis","forEach","emojiKeywordsArray","Set","keywords","query","keyword","indexOf","push","newSearch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+zuKAKA,IAAMA,EAAOC,IAAOC,IAAV,KAoBJC,EAAeF,IAAOC,IAAV,KAQZE,EAAQH,IAAOC,IAAV,KASI,SAAAG,GAAK,OAAIA,EAAMC,QAAS,IAAM,OA8B9BC,EAxBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EAEKC,oBAAS,GAFd,mBAElBH,EAFkB,KAETI,EAFS,KAIzBC,qBAAU,WACN,IAAMC,EAAY,IAAIC,IAAU,UAChC,OAAO,WACHD,EAAUE,cASlB,OACI,kBAACd,EAAD,CAAMe,QANU,SAACC,GACjBN,GAAW,GACXO,YAAY,kBAAMP,GAAW,KAAQ,MAITQ,UAAU,QAAQC,sBAAqBX,GAC/D,kBAACL,EAAD,KAAeK,GACf,kBAACJ,EAAD,CAAOE,QAASA,GAAhB,c,sTC9DZ,IAAMc,EAAYnB,IAAOC,IAAV,KAMTmB,EAAUpB,IAAOC,IAAV,KA+BEoB,EAvBA,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAGRC,EAASD,GAAQA,EAAKE,MAAM,EAAG,KAAKC,KAAI,SAAAlB,GAC1C,GAAIA,EAAO,CACP,IAAMmB,EAAKC,cACX,OACI,kBAAC,EAAD,CAAOpB,MAAOA,EAAMqB,OAAQC,IAAKH,IAGzC,OAAO,QAIX,OACI,kBAACP,EAAD,KACI,kBAACC,EAAD,KACKG,K,iLCjCjB,IAAMJ,EAAYnB,IAAOC,IAAV,KAeA6B,EARA,WACX,OACI,kBAAC,EAAD,KACI,2D,mlBCTZ,IAAMX,EAAYnB,IAAOC,IAAV,KAkCA8B,EAbA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAMd,OACI,kBAAC,EAAD,KACI,2BAAOC,YAAa,wBAAyBD,SAPhC,SAACjB,GAElBiB,EAASjB,EAAEmB,OAAOC,Y,QCgEXC,MArEf,WAAgB,IAAD,EACe5B,mBAAS,IADxB,mBACN6B,EADM,KACEC,EADF,OAEuB9B,mBAAS,IAFhC,mBAEJ+B,EAFI,KAEOC,EAFP,OAGuBhC,qBAHvB,mBAGJiC,EAHI,KAGOC,EAHP,KA2DX,OAtDAhC,qBAAW,WACPgC,EAAaC,KACd,IAEHjC,qBAAW,WAEP,IAAMkC,EAAcP,EAAOQ,cAAcC,OAAOC,MAAM,KAGhDC,EAAUJ,EAAYK,OAGxBC,EAAe,EAGfC,EAAe,GAGdH,EAAU,GAEXP,GAAaA,EAAUW,SAAS,SAAC7C,GAE7B,IAAM8C,EAAkB,YAAO,IAAIC,IAAI/C,EAAMgD,SAAST,OAAOC,MAAM,OAGnEG,EAAe,EAGfN,GAAeA,EAAYQ,SAAS,SAAAI,GAEhCH,EAAmBD,SAAS,SAAAK,GAEpBA,EAAQC,QAAQF,IAAU,GAC1BN,UAMPF,GAAWE,GACZC,EAAaQ,KAAKpD,MAK9BiC,EAAaW,KAEd,CAACd,IAQF,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQL,SARS,SAAC4B,GAElBtB,EAAUsB,EAAUf,kBAOpB,kBAAC,EAAD,CAAQvB,KAAiB,KAAXe,EAAgBI,EAAYF,MC1E9BsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d01e5336.chunk.js","sourcesContent":["import React, { useEffect, useState} from 'react'\nimport styled from \"@emotion/styled\";\nimport Clipboard from \"clipboard\";\n\n\nconst Card = styled.div`\n    display: flex;\n    cursor: pointer;\n    border-radius: 10px;\n    flex-direction: column;\n    margin: 10px;\n    width: 120px;\n    height: 120px;\n    -webkit-box-shadow: 10px 10px 28px -13px rgba(0,0,0,1);\n    -moz-box-shadow: 10px 10px 28px -13px rgba(0,0,0,1);\n    box-shadow: 10px 10px 28px -13px rgba(0,0,0,1);\n    background-color: white;\n    border: 3px solid white;\n    position: relative;\n    :hover {\n        border: 3px solid #64B6AC;\n        transition: border 0.2s ease;\n    }\n`\n\nconst EmojiWrapper = styled.div`\n    font-size: 45px;\n    flex-grow: 1;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Label = styled.div`\n    position: absolute;\n    font-size: 11px;\n    bottom: 0;\n    background-color: #64B6AC;\n    padding: 5px;\n    border-radius: 5px;\n    margin: 5px;\n    color: #DAFFEF;\n    opacity: ${props => props.visible? '1' : '0'};\n    flex-grow = 0;\n    transition: opacity 0.3s ease;\n    font-weight: bold;\n`\n\nconst Emoji = ({ emoji }) => {\n\n    const [visible, setVisible] = useState(false);\n\n    useEffect(() => {\n        const clipboard = new Clipboard(\".emoji\");\n        return () => {\n            clipboard.destroy();\n        };\n    })\n\n    const handleClick = (e) => {\n        setVisible(true);\n        setTimeout( () => setVisible(false), 900);\n    }\n\n    return (\n        <Card onClick={handleClick} className=\"emoji\" data-clipboard-text={emoji} >\n            <EmojiWrapper>{emoji}</EmojiWrapper>\n            <Label visible={visible}>Copied! </Label>\n        </Card>\n    );\n}\n\nexport default Emoji;","import React, { useEffect } from 'react'\nimport styled from \"@emotion/styled\";\nimport { v4 as uuidv4 } from 'uuid';\nimport Emoji from './Emoji'\n\nconst Container = styled.div`\n    margin-top: 30px;\n    display: flex;\n    justify-content: center;\n`\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n    width: 50%;\n    flex-wrap: wrap;\n`\n\n\nconst Result = ({ list }) => {\n\n\n    const emojis = list && list.slice(0, 100).map(emoji => {\n        if (emoji) {\n            const id = uuidv4();\n            return (\n                <Emoji emoji={emoji.symbol} key={id} />\n            );\n        }\n        return null;\n    })\n\n\n    return (\n        <Container>\n            <Wrapper>\n                {emojis}\n            </Wrapper>\n        </Container>\n    );\n}\n\nexport default Result;","import React from 'react'\nimport styled from \"@emotion/styled\";\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    color: #64B6AC;\n    text-shadow: 1px 1px #5D737E;\n`\n\nconst Header = () => {\n    return (\n        <Container>\n            <h2>Emoji Picker üçí</h2>\n        </Container>\n    );\n}\n\nexport default Header;","import React from 'react'\nimport styled from \"@emotion/styled\";\n\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    > input {\n        padding: 10px 10px;\n        width: 35%;\n        font-size: 10px;\n        border-radius: 10px;\n        font-weight: bold;\n        color: grey;\n        border: none;\n        -webkit-box-shadow: 10px 10px 28px -13px rgba(0,0,0,1);\n        -moz-box-shadow: 10px 10px 28px -13px rgba(0,0,0,1);\n        box-shadow: 10px 10px 28px -13px rgba(0,0,0,1);\n    }\n    > input: focus {\n        outline: none;\n        border: 2px solid #64B6AC;\n    }\n`\n\nconst Search = ({ onChange }) => {\n    const handleChange = (e) => {\n        // when the input value is changed update the results in real time\n        onChange(e.target.value);\n    }\n\n    return (\n        <Container>\n            <input placeholder={'Search for keyword...'} onChange={handleChange}/>\n        </Container>\n    );\n}\n\nexport default Search;","import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled'\n\nimport Result from './components/Result'\nimport Header from './components/Header'\nimport Search from './components/Search'\nimport data from './json/data.json'\n\n\n// const Header = styled.div`\n//     display: flex;\n//     flex-direction: column;\n//     align-items: center;\n//     margin-bottom: 30px;\n// `\n// const Input = styled.input`\n//     width: 60%;\n//     font-size: 15px;\n//     padding: 10px;\n// `\n\nlet counter = 0;\n\nfunction App() {\n    let [search, setSearch] = useState('');\n    const [newEmojis, setNewEmojis] = useState([])\n    const [emojiData, setEmojiData] = useState();\n\n    useEffect( () => {\n        setEmojiData(data);\n    }, [])\n\n    useEffect( () => {\n        // get a array of search words\n        const searchQuery = search.toLowerCase().trim().split(' ');\n\n        // get the array length (to make the decision if the emoji is worth to show or not)\n        const nrWords = searchQuery.length;\n\n        // create a query match counter\n        let matchCounter = 0;\n\n        // create an array to fill with the new emojis\n        let resultEmojis = [];\n\n        // if search has content\n        if ( nrWords > 0 ) {\n            // iterate every emoji\n            emojiData && emojiData.forEach( (emoji) => {\n                // remove the duplicates of the emoji's keywords using a Set\n                const emojiKeywordsArray = [...new Set(emoji.keywords.trim().split(' '))];\n\n                // reset the counter\n                matchCounter = 0;\n\n                // iterate the search query\n                searchQuery && searchQuery.forEach( query => {\n                    // iterate the emoji's keywords\n                    emojiKeywordsArray.forEach( keyword => {\n                        // if the word exists in the emoji's keywords\n                        if (keyword.indexOf(query) >= 0) {\n                            matchCounter++;  // then update the counter\n                        }\n                    })\n                })\n\n                // if counter is >= the number of words of the search query, then the emoji must be shown\n                if ( nrWords <= matchCounter ) {\n                    resultEmojis.push(emoji);\n                }\n            })\n        }\n        // update the newEmojis state\n        setNewEmojis(resultEmojis);\n\n    }, [search])\n\n    const handleChange = (newSearch) => {\n        // update search state\n        setSearch(newSearch.toLowerCase());\n    }\n\n    return (\n      <>\n        <Header />\n        <Search onChange={handleChange}/>\n        <Result list={search === '' ? emojiData : newEmojis} />\n\n    </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}